import React from 'react'
import { useNavigate } from 'react-router'
import AppLayout from '~/core/layouts/app-layout'
import { setMeta } from '~/core/lib/meta'
import { delete{{pascalSingular}}, get{{pascalPlural}} } from '~/routes/{{kebabPlural}}/api'
import { DataTable } from '~/components/table/table'
import { useTableData } from '~/components/table/use-table-data'
import { getColumns } from '~/routes/{{kebabPlural}}/table-columns'
import { useDeleteResource } from '~/core/hooks/use-delete-resource'
import { ConfirmDeleteDialog } from '~/components/confirm-delete-dialog'

import type { {{pascalSingular}} } from '~/routes/{{kebabPlural}}/types'
import type { BreadcrumbItem } from '~/core/types'
import { EmptyPlaceholder } from '~/components/empty-placeholder'
import { FileText } from 'lucide-react'

const title = '{{titlePlural}}'

export function meta() {
    return setMeta(title)
}

export default function {{pascalPlural}}() {
    const navigate = useNavigate()
    const breadcrumbs: BreadcrumbItem[] = [{ title, href: '/{{kebabPlural}}' }]

    const {
        data,
        setData,
        totalCount,
        tableState,
        tableActions,
    } = useTableData<{{pascalSingular}}>(async (params) => {
        const res = await get{{pascalPlural}}(params)
        return {
            data: res.data.data,
            total: res.data.meta.total,
        }
    })

    const {
        resourceToDelete,
        confirmDelete,
        cancelDelete,
        handleConfirmedDelete,
    } = useDeleteResource<{{pascalSingular}}>(
        delete{{pascalSingular}},
        setData,
        '{{pascalSingular}} deleted',
        'Error deleting {{titleSingular}}'
    )

    const handleEdit = ({{camelSingular}}: {{pascalSingular}}) => {
        navigate(`/{{kebabPlural}}/{{dollarVar camelSingular}}.id}`, { replace: true })
    }

    tableActions.onCreate = () => {
        navigate('/{{kebabPlural}}/create')
    }

    const columns = getColumns({
        onEdit: handleEdit,
        onDelete: confirmDelete,
    })

    return (
        <AppLayout breadcrumbs={breadcrumbs}>
            {data.length === 0 ? (
                <EmptyPlaceholder
                        title="No {{titlePlural}} Found"
                        description="Create the first {{titleSingular}} to get started"
                        icon={FileText}
                        actionLabel="Create {{titleSingular}}"
                        onAction={() => navigate('/{{kebabPlural}}/create')}
                />
            ) : (
            <DataTable
                    data={data}
                    totalCount={totalCount}
                    columns={columns}
                    tableState={tableState}
                    tableActions={tableActions}
            />
            )}

            <ConfirmDeleteDialog
                open={!!resourceToDelete}
                itemLabel={resourceToDelete?.name}
                onCancel={cancelDelete}
                onConfirm={handleConfirmedDelete}
            />
        </AppLayout>
    )
}